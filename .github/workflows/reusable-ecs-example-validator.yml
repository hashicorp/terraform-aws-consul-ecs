name: reusable-ecs-example-validator

on:
  workflow_call:
    inputs:
      name:
        description: "The name of the job that runs the validation"
        required: true
        type: string
      region:
        description: "The AWS region to deploy the application to."
        required: true
        type: string
      variables:
        description: "A stringified json containing key-value pairs that correspond to the terraform variable inputs."
        required: false
        type: string
      pass-hcp-project-id:
        description: "Indicates if the id of the project in HCP where Consul specific resources will be spun up should be passed as an input to the terraform config."
        required: false
        type: boolean
        default: false
      working-directory:
        description: "Directory where the terraform for the example is present"
        required: true
        type: string

env:
  CONSUL_LICENSE: ${{ secrets.CONSUL_LICENSE }}
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}

jobs:
  example-validator:
    name: ${{ inputs.name }}
    runs-on: ['ubuntu-latest']
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
    - name: Assume AWS IAM Role
      uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
      with:
        role-to-assume: ${{ secrets.AWS_ECS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_ECS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ECS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ECS_SECRET_ACCESS_KEY }}
        role-duration-seconds: 7200
    - name: terraform init & apply
      run: |
        VARS_JSON="${{ inputs.variables }}"
        VARS=" -var region=${{ inputs.region }}"

        for key in $(echo "$VARS_JSON" | jq -r 'keys_unsorted[]'); do
            value=$(echo "$VARS_JSON" | jq -r ".$key")

            # Sometimes value field could be a bash statement. We want
            # to evaluate it before assigning to terraform
            if [[ "$value" == "eval"* ]]; then
                value=$(eval "$value")
            fi

            VARS+=" -var $key=$value"
        done

        if [[ "${{ inputs.pass-hcp-project-id }}" == "true" ]]; then
            VARS+=" -var hcp_project_id=${{ secrets.HCP_PROJECT_ID }}"
        fi
        
        terraform init
        terraform apply -auto-approve $VARS
    - name: Validation
      run: |
        echo "Validating E2E setup"
        ./validate.sh
    - name: terraform destroy
      if: always()
      run: |
        VARS_JSON="${{ inputs.variables }}"
        VARS=" -var region=${{ inputs.region }}"

        for key in $(echo "$VARS_JSON" | jq -r 'keys_unsorted[]'); do
            value=$(echo "$VARS_JSON" | jq -r ".$key")

            # Sometimes value field could be a bash statement. We want
            # to evaluate it before assigning to terraform
            if [[ "$value" == "eval"* ]]; then
                value=$(eval "$value")
            fi

            VARS+=" -var $key=$value"
        done

        if [[ "${{ inputs.pass-hcp-project-id }}" == "true" ]]; then
            VARS+=" -var hcp_project_id=${{ secrets.HCP_PROJECT_ID }}"
        fi
        
        terraform init
        terraform destroy -auto-approve $VARS
